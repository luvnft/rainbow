# Documentation:
# https://golangci-lint.run/usage/configuration/#run-configuration

# Run:
# go run github.com/golangci/golangci-lint/cmd/golangci-lint run --fix

# List linters by category in a YAML-compatible format:
# go run github.com/golangci/golangci-lint/cmd/golangci-lint help --color always linters | sed -n '/Linters presets:/,$p' | sed 's/^/# /;s/[:,]/\n-/g'
---
linters:
  enable:
    # bugs
    - asciicheck # check code does not contain non-ASCII identifiers
    - bidichk # check for dangerous unicode character sequences
    - contextcheck # check the function whether use a non-inherited context
    - durationcheck # check for two durations multiplied together
    - errchkjson # check types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted.
    - exhaustive # check exhaustiveness of enum switch statements
    - exportloopref # check for pointers to enclosing loop variables
    - gosec # inspect source code for security problems
    - makezero # find slice declarations with non-zero initial length
    - nilerr # find the code that returns nil even if it checks that the error is not nil
    - typecheck # check types

    # comment
    - godot # check if comments end in a period
    - misspell # find commonly misspelled English words in comments

    # complexity
    - cyclop # check function and package cyclomatic complexity
    - funlen # detect long functions
    - gocognit # compute the cognitive complexity of functions
    - gocyclo # check the cyclomatic complexity of functions
    - maintidx # measure the maintainability index of each function.
    - nestif # report deeply nested if statements

    # error
    - errcheck # ANNOYING
    - errorlint # find code that will cause problems with the error wrapping scheme introduced in Go 1.13

    # format
    - decorder # check declaration order and count of types, constants, variables and functions
    - gofmt # check if code was gofmt-ed and check for code simplification
    - gofumpt # check if code was gofumpt-ed.

    # import
    - goimports # fix imports and format code in the same style as gofmt.
    - gomodguard # allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.

    # metalinter
    - gocritic # check bugs, performance and style issues
    - govet # report suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - revive # drop-in replacement of golint
    - staticcheck # apply a ton of static analysis checks

    # module
    - depguard # check if package imports are in a list of acceptable packages
    - gomoddirectives # manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.

    # performance
    - bodyclose # check if HTTP response body is closed successfully
    - noctx # noctx finds sending http request without context.Context
    - prealloc # find slice declarations that could potentially be preallocated

    # sql
    - execinquery # check query string in Query function which reads your Go src files
    - rowserrcheck # check whether Err of rows is checked successfully
    - sqlclosecheck # check that sql.Rows and sql.Stmt are closed.

    # style
    - containedctx # detect struct contained context.Context field
    - dogsled # check assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - dupl # find duplicated code
    - errname # check sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`
    - forbidigo # forbids identifiers
    - forcetypeassert # finds forced type assertions
    - gochecknoinits # check that no init functions are present in Go code
    - goconst # find repeated strings that could be replaced by a constant
    - goheader # check if file header matches to pattern
    - gomnd # ANNOYING
    - goprintffuncname # check printf-like functions are named with `f` at the end
    - gosimple # simplify code
    - grouper # Aanalyze expression groups
    - ifshort # check code uses short syntax for if-statements whenever possible
    - importas # enforce consistent import aliases    - ireturn # accept Interfaces, return Concrete Types
    - nakedret # find naked returns in functions greater than a specified function length
    - nilnil # chec there is no simultaneous return of `nil` error and an invalid value
    - nolintlint # reports ill-formed or insufficient nolint directives
    - predeclared # find code that shadows one of Go's predeclared identifiers
    - promlinter # check Prometheus metrics naming via promlint
    - tenv # detect using os.Setenv instead of t.Setenv since Go1.17
    - unconvert # remove unnecessary type conversions
    - wastedassign # find wasted assignment statements
    - whitespace # detect leading and trailing whitespace
    - nosprintfhostport # check for misuse of Sprintf to construct a host with port in a URL

    # test
    - tparallel # detect inappropriate usage of t.Parallel() method in your Go test codes
    - thelper # detect golang test helpers without t.Helper() call and checks the consistency of test helpers

    # unused
    - deadcode # find unused code
    - ineffassign # detect when assignments to existing variables are not used
    - structcheck # find unused struct fields
    - unparam # report unused function parameters
    - unused # check for unused constants, variables, functions and types
    - varcheck # find unused global variables and constants

  disable:
    # bugs
    - scopelint # DEPRECATED

    # comment
    - godox # ANNOYING

    # error
    - goerr113 # ANNOYING
    - wrapcheck # ANNOYING

    # import
    - gci # ANNOYING

    # performance
    - maligned # DEPRECATED

    # style
    - gochecknoglobals # ANNOYING
    - golint # DEPRECATED (alternatives: revive and stylecheck)
    - interfacer # DEPRECATED
    - lll # ANNOYING
    - nlreturn # ANNOYING
    - tagliatelle # ANNOYING
    - varnamelen # ANNOYING
    - wsl # ANNOYING
    - nonamedreturns # ANNOYING

    # test
    - paralleltest # ANNOYING
    - testpackage # ANNOYING
    - exhaustivestruct # DEPRECATED
    - exhaustruct # ANNOYING

linters-settings:
  dupl:
    threshold: 100

  funlen:
    lines: 100
    statements: 50

  gocyclo:
    min-complexity: 15

  cyclop:
    max-complexity: 15

  gci:
    sections: [prefix(github.com/teal-finance/)]

  goconst:
    min-len: 2
    min-occurrences: 5

  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - captLocal
      - unnamedResult
    # - dupImport # https://github.com/go-critic/go-critic/issues/845
    # - ifElseChain
    # - octalLiteral
    # - whyNoLint
    # - wrapperFunc
    # - yodaStyleExpr
    # - singleCaseSwitch # Every time this occurred in the code, there was no other way.

  # https://github.com/mvdan/gofumpt
  gofumpt:
    lang-version: "1.18"
    extra-rules: true

  goimports:
    local-prefixes: github.com/teal-finance/

  gomnd:
    settings:
      mnd:
        # don't include the "operation" and "assign,argument,case,condition"
        checks: [return]

  govet:
    check-shadowing: true
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
  lll:
    line-length: 160

  maligned:
    suggest-new: true

  misspell:
    locale: US

  nolintlint:
    allow-leading-space: true # don't require machine-readable nolint directives (i.e. with no leading space)
    allow-unused: false # report any unused nolint directives
    require-explanation: false # don't require an explanation for nolint directives
    require-specific: false # don't require nolint directives to be specific about which linter is being skipped

  gosimple:
    go: "1.18"
    # https://staticcheck.io/docs/options#checks
    checks: ["all"]

  staticcheck:
    go: "1.18"
    # https://staticcheck.io/docs/options#checks
    checks: ["all"]

  stylecheck:
    go: "1.18"
    # https://staticcheck.io/docs/options#checks
    checks:
      ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
    # https://staticcheck.io/docs/options#dot_import_whitelist
    dot-import-whitelist:
      - fmt
    # https://staticcheck.io/docs/options#initialisms
    initialisms:
      [
        "ACL",
        "API",
        "ASCII",
        "CPU",
        "CSS",
        "DNS",
        "EOF",
        "GUID",
        "HTML",
        "HTTP",
        "HTTPS",
        "ID",
        "IP",
        "JSON",
        "QPS",
        "RAM",
        "RPC",
        "SLA",
        "SMTP",
        "SQL",
        "SSH",
        "TCP",
        "TLS",
        "TTL",
        "UDP",
        "UI",
        "GID",
        "UID",
        "UUID",
        "URI",
        "URL",
        "UTF8",
        "VM",
        "XML",
        "XMPP",
        "XSRF",
        "XSS",
      ]
    # https://staticcheck.io/docs/options#http_status_code_whitelist
    http-status-code-whitelist: ["200", "400", "404", "500"]

  tagliatelle:
    case:
      rules:
        json: snake # could be "goCamel"

  # https://github.com/butuzov/ireturn
  # https://golangci-lint.run/usage/linters/#ireturn
  ireturn:
    allow:
      - anon # anonymous interfaces such as: interface{Stop()}
      - error # error interface
      - stdlib # standard library interfaces
      - github.com/prometheus\/client_golang\/prometheus.Gauge
      - github.com/prometheus\/client_golang\/prometheus.Counter

issues:
  exclude-rules:
    # Excluding configuration per-path
    - path: _test\.go
      linters:
        - gomnd
        - gosec # weak random number generator (math/rand instead of crypto/rand)
        - gocyclo
        - errcheck
        # dupl
        # unparam
        # staticcheck

    # Excluding configuration per-linter
    - linters:
        - gocritic
      text: "unnecessaryDefer:"

    # Excluding configuration per-text and per-source
    - text: "exitAfterDefer:"
      linters:
        - gocritic

run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 9m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #     vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs:
    - vendor
    - poc
  go: "1.17"

output:
  # colored-line-number|line-number|json|tab|checkstyle, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

  # make issues output unique by line, default is true
  uniq-by-line: true

  # sorts results by: filepath, line and column
  sort-results: true
