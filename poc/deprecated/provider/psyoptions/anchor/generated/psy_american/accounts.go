// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package psy_american

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type OptionMarket struct {
	OptionMint                  ag_solanago.PublicKey
	WriterTokenMint             ag_solanago.PublicKey
	UnderlyingAssetMint         ag_solanago.PublicKey
	QuoteAssetMint              ag_solanago.PublicKey
	UnderlyingAmountPerContract uint64
	QuoteAmountPerContract      uint64
	ExpirationUnixTimestamp     int64
	UnderlyingAssetPool         ag_solanago.PublicKey
	QuoteAssetPool              ag_solanago.PublicKey
	MintFeeAccount              ag_solanago.PublicKey
	ExerciseFeeAccount          ag_solanago.PublicKey
	Expired                     bool
	BumpSeed                    uint8
}

var OptionMarketDiscriminator = [8]byte{175, 238, 162, 97, 53, 122, 16, 29}

func (obj OptionMarket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OptionMarketDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `OptionMint` param:
	err = encoder.Encode(obj.OptionMint)
	if err != nil {
		return err
	}
	// Serialize `WriterTokenMint` param:
	err = encoder.Encode(obj.WriterTokenMint)
	if err != nil {
		return err
	}
	// Serialize `UnderlyingAssetMint` param:
	err = encoder.Encode(obj.UnderlyingAssetMint)
	if err != nil {
		return err
	}
	// Serialize `QuoteAssetMint` param:
	err = encoder.Encode(obj.QuoteAssetMint)
	if err != nil {
		return err
	}
	// Serialize `UnderlyingAmountPerContract` param:
	err = encoder.Encode(obj.UnderlyingAmountPerContract)
	if err != nil {
		return err
	}
	// Serialize `QuoteAmountPerContract` param:
	err = encoder.Encode(obj.QuoteAmountPerContract)
	if err != nil {
		return err
	}
	// Serialize `ExpirationUnixTimestamp` param:
	err = encoder.Encode(obj.ExpirationUnixTimestamp)
	if err != nil {
		return err
	}
	// Serialize `UnderlyingAssetPool` param:
	err = encoder.Encode(obj.UnderlyingAssetPool)
	if err != nil {
		return err
	}
	// Serialize `QuoteAssetPool` param:
	err = encoder.Encode(obj.QuoteAssetPool)
	if err != nil {
		return err
	}
	// Serialize `MintFeeAccount` param:
	err = encoder.Encode(obj.MintFeeAccount)
	if err != nil {
		return err
	}
	// Serialize `ExerciseFeeAccount` param:
	err = encoder.Encode(obj.ExerciseFeeAccount)
	if err != nil {
		return err
	}
	// Serialize `Expired` param:
	err = encoder.Encode(obj.Expired)
	if err != nil {
		return err
	}
	// Serialize `BumpSeed` param:
	err = encoder.Encode(obj.BumpSeed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OptionMarket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OptionMarketDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[175 238 162 97 53 122 16 29]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `OptionMint`:
	err = decoder.Decode(&obj.OptionMint)
	if err != nil {
		return err
	}
	// Deserialize `WriterTokenMint`:
	err = decoder.Decode(&obj.WriterTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `UnderlyingAssetMint`:
	err = decoder.Decode(&obj.UnderlyingAssetMint)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAssetMint`:
	err = decoder.Decode(&obj.QuoteAssetMint)
	if err != nil {
		return err
	}
	// Deserialize `UnderlyingAmountPerContract`:
	err = decoder.Decode(&obj.UnderlyingAmountPerContract)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAmountPerContract`:
	err = decoder.Decode(&obj.QuoteAmountPerContract)
	if err != nil {
		return err
	}
	// Deserialize `ExpirationUnixTimestamp`:
	err = decoder.Decode(&obj.ExpirationUnixTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `UnderlyingAssetPool`:
	err = decoder.Decode(&obj.UnderlyingAssetPool)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAssetPool`:
	err = decoder.Decode(&obj.QuoteAssetPool)
	if err != nil {
		return err
	}
	// Deserialize `MintFeeAccount`:
	err = decoder.Decode(&obj.MintFeeAccount)
	if err != nil {
		return err
	}
	// Deserialize `ExerciseFeeAccount`:
	err = decoder.Decode(&obj.ExerciseFeeAccount)
	if err != nil {
		return err
	}
	// Deserialize `Expired`:
	err = decoder.Decode(&obj.Expired)
	if err != nil {
		return err
	}
	// Deserialize `BumpSeed`:
	err = decoder.Decode(&obj.BumpSeed)
	if err != nil {
		return err
	}
	return nil
}
