// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package psy_american

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintOption is the `mintOption` instruction.
type MintOption struct {
	Size *uint64

	// [0] = [WRITE, SIGNER] userAuthority
	//
	// [1] = [] underlyingAssetMint
	//
	// [2] = [WRITE] underlyingAssetPool
	//
	// [3] = [WRITE] underlyingAssetSrc
	//
	// [4] = [WRITE] optionMint
	//
	// [5] = [WRITE] mintedOptionDest
	//
	// [6] = [WRITE] writerTokenMint
	//
	// [7] = [WRITE] mintedWriterTokenDest
	//
	// [8] = [] optionMarket
	//
	// [9] = [WRITE] feeOwner
	//
	// [10] = [] tokenProgram
	//
	// [11] = [] associatedTokenProgram
	//
	// [12] = [] clock
	//
	// [13] = [] rent
	//
	// [14] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewMintOptionInstructionBuilder creates a new `MintOption` instruction builder.
func NewMintOptionInstructionBuilder() *MintOption {
	nd := &MintOption{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetSize sets the "size" parameter.
func (inst *MintOption) SetSize(size uint64) *MintOption {
	inst.Size = &size
	return inst
}

// SetUserAuthorityAccount sets the "userAuthority" account.
func (inst *MintOption) SetUserAuthorityAccount(userAuthority ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(userAuthority).WRITE().SIGNER()
	return inst
}

// GetUserAuthorityAccount gets the "userAuthority" account.
func (inst *MintOption) GetUserAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetUnderlyingAssetMintAccount sets the "underlyingAssetMint" account.
func (inst *MintOption) SetUnderlyingAssetMintAccount(underlyingAssetMint ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(underlyingAssetMint)
	return inst
}

// GetUnderlyingAssetMintAccount gets the "underlyingAssetMint" account.
func (inst *MintOption) GetUnderlyingAssetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetUnderlyingAssetPoolAccount sets the "underlyingAssetPool" account.
func (inst *MintOption) SetUnderlyingAssetPoolAccount(underlyingAssetPool ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(underlyingAssetPool).WRITE()
	return inst
}

// GetUnderlyingAssetPoolAccount gets the "underlyingAssetPool" account.
func (inst *MintOption) GetUnderlyingAssetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetUnderlyingAssetSrcAccount sets the "underlyingAssetSrc" account.
func (inst *MintOption) SetUnderlyingAssetSrcAccount(underlyingAssetSrc ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(underlyingAssetSrc).WRITE()
	return inst
}

// GetUnderlyingAssetSrcAccount gets the "underlyingAssetSrc" account.
func (inst *MintOption) GetUnderlyingAssetSrcAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetOptionMintAccount sets the "optionMint" account.
func (inst *MintOption) SetOptionMintAccount(optionMint ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(optionMint).WRITE()
	return inst
}

// GetOptionMintAccount gets the "optionMint" account.
func (inst *MintOption) GetOptionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetMintedOptionDestAccount sets the "mintedOptionDest" account.
func (inst *MintOption) SetMintedOptionDestAccount(mintedOptionDest ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mintedOptionDest).WRITE()
	return inst
}

// GetMintedOptionDestAccount gets the "mintedOptionDest" account.
func (inst *MintOption) GetMintedOptionDestAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetWriterTokenMintAccount sets the "writerTokenMint" account.
func (inst *MintOption) SetWriterTokenMintAccount(writerTokenMint ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(writerTokenMint).WRITE()
	return inst
}

// GetWriterTokenMintAccount gets the "writerTokenMint" account.
func (inst *MintOption) GetWriterTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetMintedWriterTokenDestAccount sets the "mintedWriterTokenDest" account.
func (inst *MintOption) SetMintedWriterTokenDestAccount(mintedWriterTokenDest ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(mintedWriterTokenDest).WRITE()
	return inst
}

// GetMintedWriterTokenDestAccount gets the "mintedWriterTokenDest" account.
func (inst *MintOption) GetMintedWriterTokenDestAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetOptionMarketAccount sets the "optionMarket" account.
func (inst *MintOption) SetOptionMarketAccount(optionMarket ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(optionMarket)
	return inst
}

// GetOptionMarketAccount gets the "optionMarket" account.
func (inst *MintOption) GetOptionMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetFeeOwnerAccount sets the "feeOwner" account.
func (inst *MintOption) SetFeeOwnerAccount(feeOwner ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(feeOwner).WRITE()
	return inst
}

// GetFeeOwnerAccount gets the "feeOwner" account.
func (inst *MintOption) GetFeeOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MintOption) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MintOption) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10]
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *MintOption) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *MintOption) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11]
}

// SetClockAccount sets the "clock" account.
func (inst *MintOption) SetClockAccount(clock ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *MintOption) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12]
}

// SetRentAccount sets the "rent" account.
func (inst *MintOption) SetRentAccount(rent ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *MintOption) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[13]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MintOption) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MintOption {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MintOption) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14]
}

func (inst MintOption) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintOption,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintOption) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintOption) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Size == nil {
			return errors.New("Size parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.UserAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UnderlyingAssetMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UnderlyingAssetPool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UnderlyingAssetSrc is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OptionMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.MintedOptionDest is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.WriterTokenMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.MintedWriterTokenDest is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.OptionMarket is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.FeeOwner is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *MintOption) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintOption")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Size", *inst.Size))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         userAuthority", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("   underlyingAssetMint", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("   underlyingAssetPool", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("    underlyingAssetSrc", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("            optionMint", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("      mintedOptionDest", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("       writerTokenMint", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta(" mintedWriterTokenDest", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("          optionMarket", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("              feeOwner", inst.AccountMetaSlice[9]))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice[10]))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice[11]))
						accountsBranch.Child(ag_format.Meta("                 clock", inst.AccountMetaSlice[12]))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice[13]))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice[14]))
					})
				})
		})
}

func (obj MintOption) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Size` param:
	err = encoder.Encode(obj.Size)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintOption) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Size`:
	err = decoder.Decode(&obj.Size)
	if err != nil {
		return err
	}
	return nil
}

// NewMintOptionInstruction declares a new MintOption instruction with the provided parameters and accounts.
func NewMintOptionInstruction(
	// Parameters:
	size uint64,
	// Accounts:
	userAuthority ag_solanago.PublicKey,
	underlyingAssetMint ag_solanago.PublicKey,
	underlyingAssetPool ag_solanago.PublicKey,
	underlyingAssetSrc ag_solanago.PublicKey,
	optionMint ag_solanago.PublicKey,
	mintedOptionDest ag_solanago.PublicKey,
	writerTokenMint ag_solanago.PublicKey,
	mintedWriterTokenDest ag_solanago.PublicKey,
	optionMarket ag_solanago.PublicKey,
	feeOwner ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *MintOption {
	return NewMintOptionInstructionBuilder().
		SetSize(size).
		SetUserAuthorityAccount(userAuthority).
		SetUnderlyingAssetMintAccount(underlyingAssetMint).
		SetUnderlyingAssetPoolAccount(underlyingAssetPool).
		SetUnderlyingAssetSrcAccount(underlyingAssetSrc).
		SetOptionMintAccount(optionMint).
		SetMintedOptionDestAccount(mintedOptionDest).
		SetWriterTokenMintAccount(writerTokenMint).
		SetMintedWriterTokenDestAccount(mintedWriterTokenDest).
		SetOptionMarketAccount(optionMarket).
		SetFeeOwnerAccount(feeOwner).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetClockAccount(clock).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram)
}
