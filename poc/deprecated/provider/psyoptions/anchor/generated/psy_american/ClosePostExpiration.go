// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package psy_american

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClosePostExpiration is the `closePostExpiration` instruction.
type ClosePostExpiration struct {
	Size *uint64

	// [0] = [SIGNER] userAuthority
	//
	// [1] = [] optionMarket
	//
	// [2] = [WRITE] writerTokenMint
	//
	// [3] = [WRITE] writerTokenSrc
	//
	// [4] = [WRITE] underlyingAssetPool
	//
	// [5] = [WRITE] underlyingAssetDest
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] clock
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewClosePostExpirationInstructionBuilder creates a new `ClosePostExpiration` instruction builder.
func NewClosePostExpirationInstructionBuilder() *ClosePostExpiration {
	nd := &ClosePostExpiration{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetSize sets the "size" parameter.
func (inst *ClosePostExpiration) SetSize(size uint64) *ClosePostExpiration {
	inst.Size = &size
	return inst
}

// SetUserAuthorityAccount sets the "userAuthority" account.
func (inst *ClosePostExpiration) SetUserAuthorityAccount(userAuthority ag_solanago.PublicKey) *ClosePostExpiration {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(userAuthority).SIGNER()
	return inst
}

// GetUserAuthorityAccount gets the "userAuthority" account.
func (inst *ClosePostExpiration) GetUserAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetOptionMarketAccount sets the "optionMarket" account.
func (inst *ClosePostExpiration) SetOptionMarketAccount(optionMarket ag_solanago.PublicKey) *ClosePostExpiration {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(optionMarket)
	return inst
}

// GetOptionMarketAccount gets the "optionMarket" account.
func (inst *ClosePostExpiration) GetOptionMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetWriterTokenMintAccount sets the "writerTokenMint" account.
func (inst *ClosePostExpiration) SetWriterTokenMintAccount(writerTokenMint ag_solanago.PublicKey) *ClosePostExpiration {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(writerTokenMint).WRITE()
	return inst
}

// GetWriterTokenMintAccount gets the "writerTokenMint" account.
func (inst *ClosePostExpiration) GetWriterTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetWriterTokenSrcAccount sets the "writerTokenSrc" account.
func (inst *ClosePostExpiration) SetWriterTokenSrcAccount(writerTokenSrc ag_solanago.PublicKey) *ClosePostExpiration {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(writerTokenSrc).WRITE()
	return inst
}

// GetWriterTokenSrcAccount gets the "writerTokenSrc" account.
func (inst *ClosePostExpiration) GetWriterTokenSrcAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetUnderlyingAssetPoolAccount sets the "underlyingAssetPool" account.
func (inst *ClosePostExpiration) SetUnderlyingAssetPoolAccount(underlyingAssetPool ag_solanago.PublicKey) *ClosePostExpiration {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(underlyingAssetPool).WRITE()
	return inst
}

// GetUnderlyingAssetPoolAccount gets the "underlyingAssetPool" account.
func (inst *ClosePostExpiration) GetUnderlyingAssetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetUnderlyingAssetDestAccount sets the "underlyingAssetDest" account.
func (inst *ClosePostExpiration) SetUnderlyingAssetDestAccount(underlyingAssetDest ag_solanago.PublicKey) *ClosePostExpiration {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(underlyingAssetDest).WRITE()
	return inst
}

// GetUnderlyingAssetDestAccount gets the "underlyingAssetDest" account.
func (inst *ClosePostExpiration) GetUnderlyingAssetDestAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ClosePostExpiration) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ClosePostExpiration {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ClosePostExpiration) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetClockAccount sets the "clock" account.
func (inst *ClosePostExpiration) SetClockAccount(clock ag_solanago.PublicKey) *ClosePostExpiration {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *ClosePostExpiration) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

func (inst ClosePostExpiration) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClosePostExpiration,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClosePostExpiration) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClosePostExpiration) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Size == nil {
			return errors.New("Size parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.UserAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OptionMarket is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.WriterTokenMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.WriterTokenSrc is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UnderlyingAssetPool is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UnderlyingAssetDest is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Clock is not set")
		}
	}
	return nil
}

func (inst *ClosePostExpiration) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClosePostExpiration")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Size", *inst.Size))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      userAuthority", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("       optionMarket", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("    writerTokenMint", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("     writerTokenSrc", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("underlyingAssetPool", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("underlyingAssetDest", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("       tokenProgram", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("              clock", inst.AccountMetaSlice[7]))
					})
				})
		})
}

func (obj ClosePostExpiration) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Size` param:
	err = encoder.Encode(obj.Size)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ClosePostExpiration) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Size`:
	err = decoder.Decode(&obj.Size)
	if err != nil {
		return err
	}
	return nil
}

// NewClosePostExpirationInstruction declares a new ClosePostExpiration instruction with the provided parameters and accounts.
func NewClosePostExpirationInstruction(
	// Parameters:
	size uint64,
	// Accounts:
	userAuthority ag_solanago.PublicKey,
	optionMarket ag_solanago.PublicKey,
	writerTokenMint ag_solanago.PublicKey,
	writerTokenSrc ag_solanago.PublicKey,
	underlyingAssetPool ag_solanago.PublicKey,
	underlyingAssetDest ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	clock ag_solanago.PublicKey) *ClosePostExpiration {
	return NewClosePostExpirationInstructionBuilder().
		SetSize(size).
		SetUserAuthorityAccount(userAuthority).
		SetOptionMarketAccount(optionMarket).
		SetWriterTokenMintAccount(writerTokenMint).
		SetWriterTokenSrcAccount(writerTokenSrc).
		SetUnderlyingAssetPoolAccount(underlyingAssetPool).
		SetUnderlyingAssetDestAccount(underlyingAssetDest).
		SetTokenProgramAccount(tokenProgram).
		SetClockAccount(clock)
}
