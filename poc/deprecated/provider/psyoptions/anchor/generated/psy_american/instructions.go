// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package psy_american

import (
	"bytes"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
	ag_spew "github.com/spewerspew/spew"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("R2y9ip6mxmWUj4pt54jP2hz2dgvMozy9VTSwMWE7evs")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "PsyAmerican"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_InitializeMarket = ag_binary.TypeID([8]byte{35, 35, 189, 193, 155, 48, 170, 203})

	Instruction_MintOption = ag_binary.TypeID([8]byte{76, 112, 32, 89, 147, 85, 222, 43})

	Instruction_MintOptionV2 = ag_binary.TypeID([8]byte{20, 245, 159, 113, 247, 53, 69, 233})

	Instruction_ExerciseOption = ag_binary.TypeID([8]byte{231, 98, 131, 183, 245, 93, 122, 48})

	Instruction_ClosePostExpiration = ag_binary.TypeID([8]byte{115, 203, 223, 108, 122, 150, 229, 92})

	Instruction_CloseOptionPosition = ag_binary.TypeID([8]byte{225, 84, 101, 195, 235, 136, 55, 95})

	Instruction_BurnWriterForQuote = ag_binary.TypeID([8]byte{217, 231, 245, 248, 97, 254, 198, 120})

	Instruction_InitSerumMarket = ag_binary.TypeID([8]byte{55, 157, 44, 90, 69, 81, 148, 175})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_InitializeMarket:
		return "InitializeMarket"
	case Instruction_MintOption:
		return "MintOption"
	case Instruction_MintOptionV2:
		return "MintOptionV2"
	case Instruction_ExerciseOption:
		return "ExerciseOption"
	case Instruction_ClosePostExpiration:
		return "ClosePostExpiration"
	case Instruction_CloseOptionPosition:
		return "CloseOptionPosition"
	case Instruction_BurnWriterForQuote:
		return "BurnWriterForQuote"
	case Instruction_InitSerumMarket:
		return "InitSerumMarket"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize_market", (*InitializeMarket)(nil),
		},
		{
			"mint_option", (*MintOption)(nil),
		},
		{
			"mint_option_v_2", (*MintOptionV2)(nil),
		},
		{
			"exercise_option", (*ExerciseOption)(nil),
		},
		{
			"close_post_expiration", (*ClosePostExpiration)(nil),
		},
		{
			"close_option_position", (*CloseOptionPosition)(nil),
		},
		{
			"burn_writer_for_quote", (*BurnWriterForQuote)(nil),
		},
		{
			"init_serum_market", (*InitSerumMarket)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
