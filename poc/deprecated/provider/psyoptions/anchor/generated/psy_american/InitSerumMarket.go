// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package psy_american

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitSerumMarket is the `initSerumMarket` instruction.
type InitSerumMarket struct {
	MarketSpace      *uint64
	VaultSignerNonce *uint64
	CoinLotSize      *uint64
	PcLotSize        *uint64
	PcDustThreshold  *uint64

	// [0] = [WRITE, SIGNER] userAuthority
	//
	// [1] = [WRITE] optionMarket
	//
	// [2] = [WRITE] serumMarket
	//
	// [3] = [] systemProgram
	//
	// [4] = [] tokenProgram
	//
	// [5] = [] dexProgram
	//
	// [6] = [] rent
	//
	// [7] = [] pcMint
	//
	// [8] = [] optionMint
	//
	// [9] = [WRITE] requestQueue
	//
	// [10] = [WRITE] eventQueue
	//
	// [11] = [WRITE] bids
	//
	// [12] = [WRITE] asks
	//
	// [13] = [WRITE] coinVault
	//
	// [14] = [WRITE] pcVault
	//
	// [15] = [] vaultSigner
	//
	// [16] = [] marketAuthority
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewInitSerumMarketInstructionBuilder creates a new `InitSerumMarket` instruction builder.
func NewInitSerumMarketInstructionBuilder() *InitSerumMarket {
	nd := &InitSerumMarket{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	return nd
}

// SetMarketSpace sets the "marketSpace" parameter.
func (inst *InitSerumMarket) SetMarketSpace(marketSpace uint64) *InitSerumMarket {
	inst.MarketSpace = &marketSpace
	return inst
}

// SetVaultSignerNonce sets the "vaultSignerNonce" parameter.
func (inst *InitSerumMarket) SetVaultSignerNonce(vaultSignerNonce uint64) *InitSerumMarket {
	inst.VaultSignerNonce = &vaultSignerNonce
	return inst
}

// SetCoinLotSize sets the "coinLotSize" parameter.
func (inst *InitSerumMarket) SetCoinLotSize(coinLotSize uint64) *InitSerumMarket {
	inst.CoinLotSize = &coinLotSize
	return inst
}

// SetPcLotSize sets the "pcLotSize" parameter.
func (inst *InitSerumMarket) SetPcLotSize(pcLotSize uint64) *InitSerumMarket {
	inst.PcLotSize = &pcLotSize
	return inst
}

// SetPcDustThreshold sets the "pcDustThreshold" parameter.
func (inst *InitSerumMarket) SetPcDustThreshold(pcDustThreshold uint64) *InitSerumMarket {
	inst.PcDustThreshold = &pcDustThreshold
	return inst
}

// SetUserAuthorityAccount sets the "userAuthority" account.
func (inst *InitSerumMarket) SetUserAuthorityAccount(userAuthority ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(userAuthority).WRITE().SIGNER()
	return inst
}

// GetUserAuthorityAccount gets the "userAuthority" account.
func (inst *InitSerumMarket) GetUserAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetOptionMarketAccount sets the "optionMarket" account.
func (inst *InitSerumMarket) SetOptionMarketAccount(optionMarket ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(optionMarket).WRITE()
	return inst
}

// GetOptionMarketAccount gets the "optionMarket" account.
func (inst *InitSerumMarket) GetOptionMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetSerumMarketAccount sets the "serumMarket" account.
func (inst *InitSerumMarket) SetSerumMarketAccount(serumMarket ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(serumMarket).WRITE()
	return inst
}

// GetSerumMarketAccount gets the "serumMarket" account.
func (inst *InitSerumMarket) GetSerumMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitSerumMarket) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitSerumMarket) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *InitSerumMarket) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *InitSerumMarket) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetDexProgramAccount sets the "dexProgram" account.
func (inst *InitSerumMarket) SetDexProgramAccount(dexProgram ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(dexProgram)
	return inst
}

// GetDexProgramAccount gets the "dexProgram" account.
func (inst *InitSerumMarket) GetDexProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetRentAccount sets the "rent" account.
func (inst *InitSerumMarket) SetRentAccount(rent ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitSerumMarket) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetPcMintAccount sets the "pcMint" account.
func (inst *InitSerumMarket) SetPcMintAccount(pcMint ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(pcMint)
	return inst
}

// GetPcMintAccount gets the "pcMint" account.
func (inst *InitSerumMarket) GetPcMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetOptionMintAccount sets the "optionMint" account.
func (inst *InitSerumMarket) SetOptionMintAccount(optionMint ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(optionMint)
	return inst
}

// GetOptionMintAccount gets the "optionMint" account.
func (inst *InitSerumMarket) GetOptionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetRequestQueueAccount sets the "requestQueue" account.
func (inst *InitSerumMarket) SetRequestQueueAccount(requestQueue ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(requestQueue).WRITE()
	return inst
}

// GetRequestQueueAccount gets the "requestQueue" account.
func (inst *InitSerumMarket) GetRequestQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

// SetEventQueueAccount sets the "eventQueue" account.
func (inst *InitSerumMarket) SetEventQueueAccount(eventQueue ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(eventQueue).WRITE()
	return inst
}

// GetEventQueueAccount gets the "eventQueue" account.
func (inst *InitSerumMarket) GetEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10]
}

// SetBidsAccount sets the "bids" account.
func (inst *InitSerumMarket) SetBidsAccount(bids ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
func (inst *InitSerumMarket) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11]
}

// SetAsksAccount sets the "asks" account.
func (inst *InitSerumMarket) SetAsksAccount(asks ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(asks).WRITE()
	return inst
}

// GetAsksAccount gets the "asks" account.
func (inst *InitSerumMarket) GetAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12]
}

// SetCoinVaultAccount sets the "coinVault" account.
func (inst *InitSerumMarket) SetCoinVaultAccount(coinVault ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(coinVault).WRITE()
	return inst
}

// GetCoinVaultAccount gets the "coinVault" account.
func (inst *InitSerumMarket) GetCoinVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[13]
}

// SetPcVaultAccount sets the "pcVault" account.
func (inst *InitSerumMarket) SetPcVaultAccount(pcVault ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(pcVault).WRITE()
	return inst
}

// GetPcVaultAccount gets the "pcVault" account.
func (inst *InitSerumMarket) GetPcVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14]
}

// SetVaultSignerAccount sets the "vaultSigner" account.
func (inst *InitSerumMarket) SetVaultSignerAccount(vaultSigner ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(vaultSigner)
	return inst
}

// GetVaultSignerAccount gets the "vaultSigner" account.
func (inst *InitSerumMarket) GetVaultSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[15]
}

// SetMarketAuthorityAccount sets the "marketAuthority" account.
func (inst *InitSerumMarket) SetMarketAuthorityAccount(marketAuthority ag_solanago.PublicKey) *InitSerumMarket {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(marketAuthority)
	return inst
}

// GetMarketAuthorityAccount gets the "marketAuthority" account.
func (inst *InitSerumMarket) GetMarketAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[16]
}

func (inst InitSerumMarket) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitSerumMarket,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitSerumMarket) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitSerumMarket) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MarketSpace == nil {
			return errors.New("MarketSpace parameter is not set")
		}
		if inst.VaultSignerNonce == nil {
			return errors.New("VaultSignerNonce parameter is not set")
		}
		if inst.CoinLotSize == nil {
			return errors.New("CoinLotSize parameter is not set")
		}
		if inst.PcLotSize == nil {
			return errors.New("PcLotSize parameter is not set")
		}
		if inst.PcDustThreshold == nil {
			return errors.New("PcDustThreshold parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.UserAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OptionMarket is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SerumMarket is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.DexProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PcMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.OptionMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.RequestQueue is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.EventQueue is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Bids is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Asks is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.CoinVault is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.PcVault is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.VaultSigner is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.MarketAuthority is not set")
		}
	}
	return nil
}

func (inst *InitSerumMarket) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitSerumMarket")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     MarketSpace", *inst.MarketSpace))
						paramsBranch.Child(ag_format.Param("VaultSignerNonce", *inst.VaultSignerNonce))
						paramsBranch.Child(ag_format.Param("     CoinLotSize", *inst.CoinLotSize))
						paramsBranch.Child(ag_format.Param("       PcLotSize", *inst.PcLotSize))
						paramsBranch.Child(ag_format.Param(" PcDustThreshold", *inst.PcDustThreshold))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  userAuthority", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("   optionMarket", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("    serumMarket", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("  systemProgram", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("   tokenProgram", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("     dexProgram", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("           rent", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("         pcMint", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("     optionMint", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("   requestQueue", inst.AccountMetaSlice[9]))
						accountsBranch.Child(ag_format.Meta("     eventQueue", inst.AccountMetaSlice[10]))
						accountsBranch.Child(ag_format.Meta("           bids", inst.AccountMetaSlice[11]))
						accountsBranch.Child(ag_format.Meta("           asks", inst.AccountMetaSlice[12]))
						accountsBranch.Child(ag_format.Meta("      coinVault", inst.AccountMetaSlice[13]))
						accountsBranch.Child(ag_format.Meta("        pcVault", inst.AccountMetaSlice[14]))
						accountsBranch.Child(ag_format.Meta("    vaultSigner", inst.AccountMetaSlice[15]))
						accountsBranch.Child(ag_format.Meta("marketAuthority", inst.AccountMetaSlice[16]))
					})
				})
		})
}

func (obj InitSerumMarket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarketSpace` param:
	err = encoder.Encode(obj.MarketSpace)
	if err != nil {
		return err
	}
	// Serialize `VaultSignerNonce` param:
	err = encoder.Encode(obj.VaultSignerNonce)
	if err != nil {
		return err
	}
	// Serialize `CoinLotSize` param:
	err = encoder.Encode(obj.CoinLotSize)
	if err != nil {
		return err
	}
	// Serialize `PcLotSize` param:
	err = encoder.Encode(obj.PcLotSize)
	if err != nil {
		return err
	}
	// Serialize `PcDustThreshold` param:
	err = encoder.Encode(obj.PcDustThreshold)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitSerumMarket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarketSpace`:
	err = decoder.Decode(&obj.MarketSpace)
	if err != nil {
		return err
	}
	// Deserialize `VaultSignerNonce`:
	err = decoder.Decode(&obj.VaultSignerNonce)
	if err != nil {
		return err
	}
	// Deserialize `CoinLotSize`:
	err = decoder.Decode(&obj.CoinLotSize)
	if err != nil {
		return err
	}
	// Deserialize `PcLotSize`:
	err = decoder.Decode(&obj.PcLotSize)
	if err != nil {
		return err
	}
	// Deserialize `PcDustThreshold`:
	err = decoder.Decode(&obj.PcDustThreshold)
	if err != nil {
		return err
	}
	return nil
}

// NewInitSerumMarketInstruction declares a new InitSerumMarket instruction with the provided parameters and accounts.
func NewInitSerumMarketInstruction(
	// Parameters:
	marketSpace uint64,
	vaultSignerNonce uint64,
	coinLotSize uint64,
	pcLotSize uint64,
	pcDustThreshold uint64,
	// Accounts:
	userAuthority ag_solanago.PublicKey,
	optionMarket ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	dexProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	pcMint ag_solanago.PublicKey,
	optionMint ag_solanago.PublicKey,
	requestQueue ag_solanago.PublicKey,
	eventQueue ag_solanago.PublicKey,
	bids ag_solanago.PublicKey,
	asks ag_solanago.PublicKey,
	coinVault ag_solanago.PublicKey,
	pcVault ag_solanago.PublicKey,
	vaultSigner ag_solanago.PublicKey,
	marketAuthority ag_solanago.PublicKey) *InitSerumMarket {
	return NewInitSerumMarketInstructionBuilder().
		SetMarketSpace(marketSpace).
		SetVaultSignerNonce(vaultSignerNonce).
		SetCoinLotSize(coinLotSize).
		SetPcLotSize(pcLotSize).
		SetPcDustThreshold(pcDustThreshold).
		SetUserAuthorityAccount(userAuthority).
		SetOptionMarketAccount(optionMarket).
		SetSerumMarketAccount(serumMarket).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetDexProgramAccount(dexProgram).
		SetRentAccount(rent).
		SetPcMintAccount(pcMint).
		SetOptionMintAccount(optionMint).
		SetRequestQueueAccount(requestQueue).
		SetEventQueueAccount(eventQueue).
		SetBidsAccount(bids).
		SetAsksAccount(asks).
		SetCoinVaultAccount(coinVault).
		SetPcVaultAccount(pcVault).
		SetVaultSignerAccount(vaultSigner).
		SetMarketAuthorityAccount(marketAuthority)
}
