// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package psy_american

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeMarket is the `initializeMarket` instruction.
type InitializeMarket struct {
	UnderlyingAmountPerContract *uint64
	QuoteAmountPerContract      *uint64
	ExpirationUnixTimestamp     *int64
	BumpSeed                    *uint8

	// [0] = [WRITE, SIGNER] authority
	//
	// [1] = [] underlyingAssetMint
	//
	// [2] = [] quoteAssetMint
	//
	// [3] = [WRITE] optionMint
	//
	// [4] = [WRITE] writerTokenMint
	//
	// [5] = [WRITE] quoteAssetPool
	//
	// [6] = [WRITE] underlyingAssetPool
	//
	// [7] = [WRITE] optionMarket
	//
	// [8] = [] feeOwner
	//
	// [9] = [] tokenProgram
	//
	// [10] = [] associatedTokenProgram
	//
	// [11] = [] rent
	//
	// [12] = [] systemProgram
	//
	// [13] = [] clock
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewInitializeMarketInstructionBuilder creates a new `InitializeMarket` instruction builder.
func NewInitializeMarketInstructionBuilder() *InitializeMarket {
	nd := &InitializeMarket{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetUnderlyingAmountPerContract sets the "underlyingAmountPerContract" parameter.
func (inst *InitializeMarket) SetUnderlyingAmountPerContract(underlyingAmountPerContract uint64) *InitializeMarket {
	inst.UnderlyingAmountPerContract = &underlyingAmountPerContract
	return inst
}

// SetQuoteAmountPerContract sets the "quoteAmountPerContract" parameter.
func (inst *InitializeMarket) SetQuoteAmountPerContract(quoteAmountPerContract uint64) *InitializeMarket {
	inst.QuoteAmountPerContract = &quoteAmountPerContract
	return inst
}

// SetExpirationUnixTimestamp sets the "expirationUnixTimestamp" parameter.
func (inst *InitializeMarket) SetExpirationUnixTimestamp(expirationUnixTimestamp int64) *InitializeMarket {
	inst.ExpirationUnixTimestamp = &expirationUnixTimestamp
	return inst
}

// SetBumpSeed sets the "bumpSeed" parameter.
func (inst *InitializeMarket) SetBumpSeed(bumpSeed uint8) *InitializeMarket {
	inst.BumpSeed = &bumpSeed
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *InitializeMarket) SetAuthorityAccount(authority ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *InitializeMarket) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetUnderlyingAssetMintAccount sets the "underlyingAssetMint" account.
func (inst *InitializeMarket) SetUnderlyingAssetMintAccount(underlyingAssetMint ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(underlyingAssetMint)
	return inst
}

// GetUnderlyingAssetMintAccount gets the "underlyingAssetMint" account.
func (inst *InitializeMarket) GetUnderlyingAssetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetQuoteAssetMintAccount sets the "quoteAssetMint" account.
func (inst *InitializeMarket) SetQuoteAssetMintAccount(quoteAssetMint ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(quoteAssetMint)
	return inst
}

// GetQuoteAssetMintAccount gets the "quoteAssetMint" account.
func (inst *InitializeMarket) GetQuoteAssetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetOptionMintAccount sets the "optionMint" account.
func (inst *InitializeMarket) SetOptionMintAccount(optionMint ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(optionMint).WRITE()
	return inst
}

// GetOptionMintAccount gets the "optionMint" account.
func (inst *InitializeMarket) GetOptionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetWriterTokenMintAccount sets the "writerTokenMint" account.
func (inst *InitializeMarket) SetWriterTokenMintAccount(writerTokenMint ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(writerTokenMint).WRITE()
	return inst
}

// GetWriterTokenMintAccount gets the "writerTokenMint" account.
func (inst *InitializeMarket) GetWriterTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetQuoteAssetPoolAccount sets the "quoteAssetPool" account.
func (inst *InitializeMarket) SetQuoteAssetPoolAccount(quoteAssetPool ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(quoteAssetPool).WRITE()
	return inst
}

// GetQuoteAssetPoolAccount gets the "quoteAssetPool" account.
func (inst *InitializeMarket) GetQuoteAssetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetUnderlyingAssetPoolAccount sets the "underlyingAssetPool" account.
func (inst *InitializeMarket) SetUnderlyingAssetPoolAccount(underlyingAssetPool ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(underlyingAssetPool).WRITE()
	return inst
}

// GetUnderlyingAssetPoolAccount gets the "underlyingAssetPool" account.
func (inst *InitializeMarket) GetUnderlyingAssetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetOptionMarketAccount sets the "optionMarket" account.
func (inst *InitializeMarket) SetOptionMarketAccount(optionMarket ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(optionMarket).WRITE()
	return inst
}

// GetOptionMarketAccount gets the "optionMarket" account.
func (inst *InitializeMarket) GetOptionMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetFeeOwnerAccount sets the "feeOwner" account.
func (inst *InitializeMarket) SetFeeOwnerAccount(feeOwner ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(feeOwner)
	return inst
}

// GetFeeOwnerAccount gets the "feeOwner" account.
func (inst *InitializeMarket) GetFeeOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *InitializeMarket) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *InitializeMarket) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *InitializeMarket) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *InitializeMarket) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10]
}

// SetRentAccount sets the "rent" account.
func (inst *InitializeMarket) SetRentAccount(rent ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializeMarket) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeMarket) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeMarket) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12]
}

// SetClockAccount sets the "clock" account.
func (inst *InitializeMarket) SetClockAccount(clock ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *InitializeMarket) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[13]
}

func (inst InitializeMarket) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeMarket,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeMarket) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeMarket) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.UnderlyingAmountPerContract == nil {
			return errors.New("UnderlyingAmountPerContract parameter is not set")
		}
		if inst.QuoteAmountPerContract == nil {
			return errors.New("QuoteAmountPerContract parameter is not set")
		}
		if inst.ExpirationUnixTimestamp == nil {
			return errors.New("ExpirationUnixTimestamp parameter is not set")
		}
		if inst.BumpSeed == nil {
			return errors.New("BumpSeed parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UnderlyingAssetMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.QuoteAssetMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.OptionMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.WriterTokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.QuoteAssetPool is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.UnderlyingAssetPool is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.OptionMarket is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.FeeOwner is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Clock is not set")
		}
	}
	return nil
}

func (inst *InitializeMarket) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeMarket")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("UnderlyingAmountPerContract", *inst.UnderlyingAmountPerContract))
						paramsBranch.Child(ag_format.Param("     QuoteAmountPerContract", *inst.QuoteAmountPerContract))
						paramsBranch.Child(ag_format.Param("    ExpirationUnixTimestamp", *inst.ExpirationUnixTimestamp))
						paramsBranch.Child(ag_format.Param("                   BumpSeed", *inst.BumpSeed))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             authority", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("   underlyingAssetMint", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("        quoteAssetMint", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("            optionMint", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("       writerTokenMint", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("        quoteAssetPool", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("   underlyingAssetPool", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("          optionMarket", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("              feeOwner", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice[9]))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice[10]))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice[11]))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice[12]))
						accountsBranch.Child(ag_format.Meta("                 clock", inst.AccountMetaSlice[13]))
					})
				})
		})
}

func (obj InitializeMarket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `UnderlyingAmountPerContract` param:
	err = encoder.Encode(obj.UnderlyingAmountPerContract)
	if err != nil {
		return err
	}
	// Serialize `QuoteAmountPerContract` param:
	err = encoder.Encode(obj.QuoteAmountPerContract)
	if err != nil {
		return err
	}
	// Serialize `ExpirationUnixTimestamp` param:
	err = encoder.Encode(obj.ExpirationUnixTimestamp)
	if err != nil {
		return err
	}
	// Serialize `BumpSeed` param:
	err = encoder.Encode(obj.BumpSeed)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeMarket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `UnderlyingAmountPerContract`:
	err = decoder.Decode(&obj.UnderlyingAmountPerContract)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAmountPerContract`:
	err = decoder.Decode(&obj.QuoteAmountPerContract)
	if err != nil {
		return err
	}
	// Deserialize `ExpirationUnixTimestamp`:
	err = decoder.Decode(&obj.ExpirationUnixTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `BumpSeed`:
	err = decoder.Decode(&obj.BumpSeed)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeMarketInstruction declares a new InitializeMarket instruction with the provided parameters and accounts.
func NewInitializeMarketInstruction(
	// Parameters:
	underlyingAmountPerContract uint64,
	quoteAmountPerContract uint64,
	expirationUnixTimestamp int64,
	bumpSeed uint8,
	// Accounts:
	authority ag_solanago.PublicKey,
	underlyingAssetMint ag_solanago.PublicKey,
	quoteAssetMint ag_solanago.PublicKey,
	optionMint ag_solanago.PublicKey,
	writerTokenMint ag_solanago.PublicKey,
	quoteAssetPool ag_solanago.PublicKey,
	underlyingAssetPool ag_solanago.PublicKey,
	optionMarket ag_solanago.PublicKey,
	feeOwner ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	clock ag_solanago.PublicKey) *InitializeMarket {
	return NewInitializeMarketInstructionBuilder().
		SetUnderlyingAmountPerContract(underlyingAmountPerContract).
		SetQuoteAmountPerContract(quoteAmountPerContract).
		SetExpirationUnixTimestamp(expirationUnixTimestamp).
		SetBumpSeed(bumpSeed).
		SetAuthorityAccount(authority).
		SetUnderlyingAssetMintAccount(underlyingAssetMint).
		SetQuoteAssetMintAccount(quoteAssetMint).
		SetOptionMintAccount(optionMint).
		SetWriterTokenMintAccount(writerTokenMint).
		SetQuoteAssetPoolAccount(quoteAssetPool).
		SetUnderlyingAssetPoolAccount(underlyingAssetPool).
		SetOptionMarketAccount(optionMarket).
		SetFeeOwnerAccount(feeOwner).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram).
		SetClockAccount(clock)
}
