// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package psy_american

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CloseOptionPosition is the `closeOptionPosition` instruction.
type CloseOptionPosition struct {
	Size *uint64

	// [0] = [SIGNER] userAuthority
	//
	// [1] = [] optionMarket
	//
	// [2] = [WRITE] writerTokenMint
	//
	// [3] = [WRITE] writerTokenSrc
	//
	// [4] = [WRITE] optionTokenMint
	//
	// [5] = [WRITE] optionTokenSrc
	//
	// [6] = [WRITE] underlyingAssetPool
	//
	// [7] = [WRITE] underlyingAssetDest
	//
	// [8] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewCloseOptionPositionInstructionBuilder creates a new `CloseOptionPosition` instruction builder.
func NewCloseOptionPositionInstructionBuilder() *CloseOptionPosition {
	nd := &CloseOptionPosition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetSize sets the "size" parameter.
func (inst *CloseOptionPosition) SetSize(size uint64) *CloseOptionPosition {
	inst.Size = &size
	return inst
}

// SetUserAuthorityAccount sets the "userAuthority" account.
func (inst *CloseOptionPosition) SetUserAuthorityAccount(userAuthority ag_solanago.PublicKey) *CloseOptionPosition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(userAuthority).SIGNER()
	return inst
}

// GetUserAuthorityAccount gets the "userAuthority" account.
func (inst *CloseOptionPosition) GetUserAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetOptionMarketAccount sets the "optionMarket" account.
func (inst *CloseOptionPosition) SetOptionMarketAccount(optionMarket ag_solanago.PublicKey) *CloseOptionPosition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(optionMarket)
	return inst
}

// GetOptionMarketAccount gets the "optionMarket" account.
func (inst *CloseOptionPosition) GetOptionMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetWriterTokenMintAccount sets the "writerTokenMint" account.
func (inst *CloseOptionPosition) SetWriterTokenMintAccount(writerTokenMint ag_solanago.PublicKey) *CloseOptionPosition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(writerTokenMint).WRITE()
	return inst
}

// GetWriterTokenMintAccount gets the "writerTokenMint" account.
func (inst *CloseOptionPosition) GetWriterTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetWriterTokenSrcAccount sets the "writerTokenSrc" account.
func (inst *CloseOptionPosition) SetWriterTokenSrcAccount(writerTokenSrc ag_solanago.PublicKey) *CloseOptionPosition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(writerTokenSrc).WRITE()
	return inst
}

// GetWriterTokenSrcAccount gets the "writerTokenSrc" account.
func (inst *CloseOptionPosition) GetWriterTokenSrcAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetOptionTokenMintAccount sets the "optionTokenMint" account.
func (inst *CloseOptionPosition) SetOptionTokenMintAccount(optionTokenMint ag_solanago.PublicKey) *CloseOptionPosition {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(optionTokenMint).WRITE()
	return inst
}

// GetOptionTokenMintAccount gets the "optionTokenMint" account.
func (inst *CloseOptionPosition) GetOptionTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetOptionTokenSrcAccount sets the "optionTokenSrc" account.
func (inst *CloseOptionPosition) SetOptionTokenSrcAccount(optionTokenSrc ag_solanago.PublicKey) *CloseOptionPosition {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(optionTokenSrc).WRITE()
	return inst
}

// GetOptionTokenSrcAccount gets the "optionTokenSrc" account.
func (inst *CloseOptionPosition) GetOptionTokenSrcAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetUnderlyingAssetPoolAccount sets the "underlyingAssetPool" account.
func (inst *CloseOptionPosition) SetUnderlyingAssetPoolAccount(underlyingAssetPool ag_solanago.PublicKey) *CloseOptionPosition {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(underlyingAssetPool).WRITE()
	return inst
}

// GetUnderlyingAssetPoolAccount gets the "underlyingAssetPool" account.
func (inst *CloseOptionPosition) GetUnderlyingAssetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetUnderlyingAssetDestAccount sets the "underlyingAssetDest" account.
func (inst *CloseOptionPosition) SetUnderlyingAssetDestAccount(underlyingAssetDest ag_solanago.PublicKey) *CloseOptionPosition {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(underlyingAssetDest).WRITE()
	return inst
}

// GetUnderlyingAssetDestAccount gets the "underlyingAssetDest" account.
func (inst *CloseOptionPosition) GetUnderlyingAssetDestAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CloseOptionPosition) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CloseOptionPosition {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CloseOptionPosition) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

func (inst CloseOptionPosition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CloseOptionPosition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseOptionPosition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseOptionPosition) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Size == nil {
			return errors.New("Size parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.UserAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OptionMarket is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.WriterTokenMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.WriterTokenSrc is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OptionTokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.OptionTokenSrc is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.UnderlyingAssetPool is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.UnderlyingAssetDest is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CloseOptionPosition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseOptionPosition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Size", *inst.Size))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      userAuthority", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("       optionMarket", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("    writerTokenMint", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("     writerTokenSrc", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("    optionTokenMint", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("     optionTokenSrc", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("underlyingAssetPool", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("underlyingAssetDest", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("       tokenProgram", inst.AccountMetaSlice[8]))
					})
				})
		})
}

func (obj CloseOptionPosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Size` param:
	err = encoder.Encode(obj.Size)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CloseOptionPosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Size`:
	err = decoder.Decode(&obj.Size)
	if err != nil {
		return err
	}
	return nil
}

// NewCloseOptionPositionInstruction declares a new CloseOptionPosition instruction with the provided parameters and accounts.
func NewCloseOptionPositionInstruction(
	// Parameters:
	size uint64,
	// Accounts:
	userAuthority ag_solanago.PublicKey,
	optionMarket ag_solanago.PublicKey,
	writerTokenMint ag_solanago.PublicKey,
	writerTokenSrc ag_solanago.PublicKey,
	optionTokenMint ag_solanago.PublicKey,
	optionTokenSrc ag_solanago.PublicKey,
	underlyingAssetPool ag_solanago.PublicKey,
	underlyingAssetDest ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CloseOptionPosition {
	return NewCloseOptionPositionInstructionBuilder().
		SetSize(size).
		SetUserAuthorityAccount(userAuthority).
		SetOptionMarketAccount(optionMarket).
		SetWriterTokenMintAccount(writerTokenMint).
		SetWriterTokenSrcAccount(writerTokenSrc).
		SetOptionTokenMintAccount(optionTokenMint).
		SetOptionTokenSrcAccount(optionTokenSrc).
		SetUnderlyingAssetPoolAccount(underlyingAssetPool).
		SetUnderlyingAssetDestAccount(underlyingAssetDest).
		SetTokenProgramAccount(tokenProgram)
}
