// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package psy_american

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintOptionV2 is the `mintOptionV2` instruction.
type MintOptionV2 struct {
	Size *uint64

	// [0] = [WRITE, SIGNER] userAuthority
	//
	// [1] = [] underlyingAssetMint
	//
	// [2] = [WRITE] underlyingAssetPool
	//
	// [3] = [WRITE] underlyingAssetSrc
	//
	// [4] = [WRITE] optionMint
	//
	// [5] = [WRITE] mintedOptionDest
	//
	// [6] = [WRITE] writerTokenMint
	//
	// [7] = [WRITE] mintedWriterTokenDest
	//
	// [8] = [] optionMarket
	//
	// [9] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewMintOptionV2InstructionBuilder creates a new `MintOptionV2` instruction builder.
func NewMintOptionV2InstructionBuilder() *MintOptionV2 {
	nd := &MintOptionV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetSize sets the "size" parameter.
func (inst *MintOptionV2) SetSize(size uint64) *MintOptionV2 {
	inst.Size = &size
	return inst
}

// SetUserAuthorityAccount sets the "userAuthority" account.
func (inst *MintOptionV2) SetUserAuthorityAccount(userAuthority ag_solanago.PublicKey) *MintOptionV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(userAuthority).WRITE().SIGNER()
	return inst
}

// GetUserAuthorityAccount gets the "userAuthority" account.
func (inst *MintOptionV2) GetUserAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetUnderlyingAssetMintAccount sets the "underlyingAssetMint" account.
func (inst *MintOptionV2) SetUnderlyingAssetMintAccount(underlyingAssetMint ag_solanago.PublicKey) *MintOptionV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(underlyingAssetMint)
	return inst
}

// GetUnderlyingAssetMintAccount gets the "underlyingAssetMint" account.
func (inst *MintOptionV2) GetUnderlyingAssetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetUnderlyingAssetPoolAccount sets the "underlyingAssetPool" account.
func (inst *MintOptionV2) SetUnderlyingAssetPoolAccount(underlyingAssetPool ag_solanago.PublicKey) *MintOptionV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(underlyingAssetPool).WRITE()
	return inst
}

// GetUnderlyingAssetPoolAccount gets the "underlyingAssetPool" account.
func (inst *MintOptionV2) GetUnderlyingAssetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetUnderlyingAssetSrcAccount sets the "underlyingAssetSrc" account.
func (inst *MintOptionV2) SetUnderlyingAssetSrcAccount(underlyingAssetSrc ag_solanago.PublicKey) *MintOptionV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(underlyingAssetSrc).WRITE()
	return inst
}

// GetUnderlyingAssetSrcAccount gets the "underlyingAssetSrc" account.
func (inst *MintOptionV2) GetUnderlyingAssetSrcAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetOptionMintAccount sets the "optionMint" account.
func (inst *MintOptionV2) SetOptionMintAccount(optionMint ag_solanago.PublicKey) *MintOptionV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(optionMint).WRITE()
	return inst
}

// GetOptionMintAccount gets the "optionMint" account.
func (inst *MintOptionV2) GetOptionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetMintedOptionDestAccount sets the "mintedOptionDest" account.
func (inst *MintOptionV2) SetMintedOptionDestAccount(mintedOptionDest ag_solanago.PublicKey) *MintOptionV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mintedOptionDest).WRITE()
	return inst
}

// GetMintedOptionDestAccount gets the "mintedOptionDest" account.
func (inst *MintOptionV2) GetMintedOptionDestAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetWriterTokenMintAccount sets the "writerTokenMint" account.
func (inst *MintOptionV2) SetWriterTokenMintAccount(writerTokenMint ag_solanago.PublicKey) *MintOptionV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(writerTokenMint).WRITE()
	return inst
}

// GetWriterTokenMintAccount gets the "writerTokenMint" account.
func (inst *MintOptionV2) GetWriterTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetMintedWriterTokenDestAccount sets the "mintedWriterTokenDest" account.
func (inst *MintOptionV2) SetMintedWriterTokenDestAccount(mintedWriterTokenDest ag_solanago.PublicKey) *MintOptionV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(mintedWriterTokenDest).WRITE()
	return inst
}

// GetMintedWriterTokenDestAccount gets the "mintedWriterTokenDest" account.
func (inst *MintOptionV2) GetMintedWriterTokenDestAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetOptionMarketAccount sets the "optionMarket" account.
func (inst *MintOptionV2) SetOptionMarketAccount(optionMarket ag_solanago.PublicKey) *MintOptionV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(optionMarket)
	return inst
}

// GetOptionMarketAccount gets the "optionMarket" account.
func (inst *MintOptionV2) GetOptionMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MintOptionV2) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintOptionV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MintOptionV2) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

func (inst MintOptionV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintOptionV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintOptionV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintOptionV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Size == nil {
			return errors.New("Size parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.UserAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UnderlyingAssetMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UnderlyingAssetPool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UnderlyingAssetSrc is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OptionMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.MintedOptionDest is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.WriterTokenMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.MintedWriterTokenDest is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.OptionMarket is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *MintOptionV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintOptionV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Size", *inst.Size))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        userAuthority", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("  underlyingAssetMint", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("  underlyingAssetPool", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("   underlyingAssetSrc", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("           optionMint", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("     mintedOptionDest", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("      writerTokenMint", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("mintedWriterTokenDest", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("         optionMarket", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("         tokenProgram", inst.AccountMetaSlice[9]))
					})
				})
		})
}

func (obj MintOptionV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Size` param:
	err = encoder.Encode(obj.Size)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintOptionV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Size`:
	err = decoder.Decode(&obj.Size)
	if err != nil {
		return err
	}
	return nil
}

// NewMintOptionV2Instruction declares a new MintOptionV2 instruction with the provided parameters and accounts.
func NewMintOptionV2Instruction(
	// Parameters:
	size uint64,
	// Accounts:
	userAuthority ag_solanago.PublicKey,
	underlyingAssetMint ag_solanago.PublicKey,
	underlyingAssetPool ag_solanago.PublicKey,
	underlyingAssetSrc ag_solanago.PublicKey,
	optionMint ag_solanago.PublicKey,
	mintedOptionDest ag_solanago.PublicKey,
	writerTokenMint ag_solanago.PublicKey,
	mintedWriterTokenDest ag_solanago.PublicKey,
	optionMarket ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *MintOptionV2 {
	return NewMintOptionV2InstructionBuilder().
		SetSize(size).
		SetUserAuthorityAccount(userAuthority).
		SetUnderlyingAssetMintAccount(underlyingAssetMint).
		SetUnderlyingAssetPoolAccount(underlyingAssetPool).
		SetUnderlyingAssetSrcAccount(underlyingAssetSrc).
		SetOptionMintAccount(optionMint).
		SetMintedOptionDestAccount(mintedOptionDest).
		SetWriterTokenMintAccount(writerTokenMint).
		SetMintedWriterTokenDestAccount(mintedWriterTokenDest).
		SetOptionMarketAccount(optionMarket).
		SetTokenProgramAccount(tokenProgram)
}
