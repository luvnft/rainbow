// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package psy_american

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ExerciseOption is the `exerciseOption` instruction.
type ExerciseOption struct {
	Size *uint64

	// [0] = [WRITE, SIGNER] userAuthority
	//
	// [1] = [WRITE, SIGNER] optionAuthority
	//
	// [2] = [] optionMarket
	//
	// [3] = [WRITE] optionMint
	//
	// [4] = [WRITE] exerciserOptionTokenSrc
	//
	// [5] = [WRITE] underlyingAssetPool
	//
	// [6] = [WRITE] underlyingAssetDest
	//
	// [7] = [WRITE] quoteAssetPool
	//
	// [8] = [WRITE] quoteAssetSrc
	//
	// [9] = [WRITE] feeOwner
	//
	// [10] = [] tokenProgram
	//
	// [11] = [] systemProgram
	//
	// [12] = [] clock
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewExerciseOptionInstructionBuilder creates a new `ExerciseOption` instruction builder.
func NewExerciseOptionInstructionBuilder() *ExerciseOption {
	nd := &ExerciseOption{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetSize sets the "size" parameter.
func (inst *ExerciseOption) SetSize(size uint64) *ExerciseOption {
	inst.Size = &size
	return inst
}

// SetUserAuthorityAccount sets the "userAuthority" account.
func (inst *ExerciseOption) SetUserAuthorityAccount(userAuthority ag_solanago.PublicKey) *ExerciseOption {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(userAuthority).WRITE().SIGNER()
	return inst
}

// GetUserAuthorityAccount gets the "userAuthority" account.
func (inst *ExerciseOption) GetUserAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetOptionAuthorityAccount sets the "optionAuthority" account.
func (inst *ExerciseOption) SetOptionAuthorityAccount(optionAuthority ag_solanago.PublicKey) *ExerciseOption {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(optionAuthority).WRITE().SIGNER()
	return inst
}

// GetOptionAuthorityAccount gets the "optionAuthority" account.
func (inst *ExerciseOption) GetOptionAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetOptionMarketAccount sets the "optionMarket" account.
func (inst *ExerciseOption) SetOptionMarketAccount(optionMarket ag_solanago.PublicKey) *ExerciseOption {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(optionMarket)
	return inst
}

// GetOptionMarketAccount gets the "optionMarket" account.
func (inst *ExerciseOption) GetOptionMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetOptionMintAccount sets the "optionMint" account.
func (inst *ExerciseOption) SetOptionMintAccount(optionMint ag_solanago.PublicKey) *ExerciseOption {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(optionMint).WRITE()
	return inst
}

// GetOptionMintAccount gets the "optionMint" account.
func (inst *ExerciseOption) GetOptionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetExerciserOptionTokenSrcAccount sets the "exerciserOptionTokenSrc" account.
func (inst *ExerciseOption) SetExerciserOptionTokenSrcAccount(exerciserOptionTokenSrc ag_solanago.PublicKey) *ExerciseOption {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(exerciserOptionTokenSrc).WRITE()
	return inst
}

// GetExerciserOptionTokenSrcAccount gets the "exerciserOptionTokenSrc" account.
func (inst *ExerciseOption) GetExerciserOptionTokenSrcAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetUnderlyingAssetPoolAccount sets the "underlyingAssetPool" account.
func (inst *ExerciseOption) SetUnderlyingAssetPoolAccount(underlyingAssetPool ag_solanago.PublicKey) *ExerciseOption {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(underlyingAssetPool).WRITE()
	return inst
}

// GetUnderlyingAssetPoolAccount gets the "underlyingAssetPool" account.
func (inst *ExerciseOption) GetUnderlyingAssetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetUnderlyingAssetDestAccount sets the "underlyingAssetDest" account.
func (inst *ExerciseOption) SetUnderlyingAssetDestAccount(underlyingAssetDest ag_solanago.PublicKey) *ExerciseOption {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(underlyingAssetDest).WRITE()
	return inst
}

// GetUnderlyingAssetDestAccount gets the "underlyingAssetDest" account.
func (inst *ExerciseOption) GetUnderlyingAssetDestAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetQuoteAssetPoolAccount sets the "quoteAssetPool" account.
func (inst *ExerciseOption) SetQuoteAssetPoolAccount(quoteAssetPool ag_solanago.PublicKey) *ExerciseOption {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(quoteAssetPool).WRITE()
	return inst
}

// GetQuoteAssetPoolAccount gets the "quoteAssetPool" account.
func (inst *ExerciseOption) GetQuoteAssetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetQuoteAssetSrcAccount sets the "quoteAssetSrc" account.
func (inst *ExerciseOption) SetQuoteAssetSrcAccount(quoteAssetSrc ag_solanago.PublicKey) *ExerciseOption {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(quoteAssetSrc).WRITE()
	return inst
}

// GetQuoteAssetSrcAccount gets the "quoteAssetSrc" account.
func (inst *ExerciseOption) GetQuoteAssetSrcAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetFeeOwnerAccount sets the "feeOwner" account.
func (inst *ExerciseOption) SetFeeOwnerAccount(feeOwner ag_solanago.PublicKey) *ExerciseOption {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(feeOwner).WRITE()
	return inst
}

// GetFeeOwnerAccount gets the "feeOwner" account.
func (inst *ExerciseOption) GetFeeOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ExerciseOption) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ExerciseOption {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ExerciseOption) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ExerciseOption) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ExerciseOption {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ExerciseOption) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11]
}

// SetClockAccount sets the "clock" account.
func (inst *ExerciseOption) SetClockAccount(clock ag_solanago.PublicKey) *ExerciseOption {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *ExerciseOption) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12]
}

func (inst ExerciseOption) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ExerciseOption,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ExerciseOption) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ExerciseOption) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Size == nil {
			return errors.New("Size parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.UserAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OptionAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OptionMarket is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.OptionMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ExerciserOptionTokenSrc is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UnderlyingAssetPool is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.UnderlyingAssetDest is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.QuoteAssetPool is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.QuoteAssetSrc is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.FeeOwner is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Clock is not set")
		}
	}
	return nil
}

func (inst *ExerciseOption) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ExerciseOption")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Size", *inst.Size))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          userAuthority", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("        optionAuthority", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("           optionMarket", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("             optionMint", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("exerciserOptionTokenSrc", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("    underlyingAssetPool", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("    underlyingAssetDest", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("         quoteAssetPool", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("          quoteAssetSrc", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("               feeOwner", inst.AccountMetaSlice[9]))
						accountsBranch.Child(ag_format.Meta("           tokenProgram", inst.AccountMetaSlice[10]))
						accountsBranch.Child(ag_format.Meta("          systemProgram", inst.AccountMetaSlice[11]))
						accountsBranch.Child(ag_format.Meta("                  clock", inst.AccountMetaSlice[12]))
					})
				})
		})
}

func (obj ExerciseOption) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Size` param:
	err = encoder.Encode(obj.Size)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ExerciseOption) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Size`:
	err = decoder.Decode(&obj.Size)
	if err != nil {
		return err
	}
	return nil
}

// NewExerciseOptionInstruction declares a new ExerciseOption instruction with the provided parameters and accounts.
func NewExerciseOptionInstruction(
	// Parameters:
	size uint64,
	// Accounts:
	userAuthority ag_solanago.PublicKey,
	optionAuthority ag_solanago.PublicKey,
	optionMarket ag_solanago.PublicKey,
	optionMint ag_solanago.PublicKey,
	exerciserOptionTokenSrc ag_solanago.PublicKey,
	underlyingAssetPool ag_solanago.PublicKey,
	underlyingAssetDest ag_solanago.PublicKey,
	quoteAssetPool ag_solanago.PublicKey,
	quoteAssetSrc ag_solanago.PublicKey,
	feeOwner ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	clock ag_solanago.PublicKey) *ExerciseOption {
	return NewExerciseOptionInstructionBuilder().
		SetSize(size).
		SetUserAuthorityAccount(userAuthority).
		SetOptionAuthorityAccount(optionAuthority).
		SetOptionMarketAccount(optionMarket).
		SetOptionMintAccount(optionMint).
		SetExerciserOptionTokenSrcAccount(exerciserOptionTokenSrc).
		SetUnderlyingAssetPoolAccount(underlyingAssetPool).
		SetUnderlyingAssetDestAccount(underlyingAssetDest).
		SetQuoteAssetPoolAccount(quoteAssetPool).
		SetQuoteAssetSrcAccount(quoteAssetSrc).
		SetFeeOwnerAccount(feeOwner).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetClockAccount(clock)
}
