// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package thales

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// MarketsMarketsMarket includes the requested fields of the GraphQL type Market.
type MarketsMarketsMarket struct {
	Id           string `json:"id"`
	Timestamp    string `json:"timestamp"`
	Creator      string `json:"creator"`
	CurrencyKey  string `json:"currencyKey"`
	StrikePrice  string `json:"strikePrice"`
	MaturityDate string `json:"maturityDate"`
	ExpiryDate   string `json:"expiryDate"`
	IsOpen       bool   `json:"isOpen"`
	Result       int    `json:"result"`
	LongAddress  string `json:"longAddress"`
	ShortAddress string `json:"shortAddress"`
	FinalPrice   string `json:"finalPrice"`
}

// GetId returns MarketsMarketsMarket.Id, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetId() string { return v.Id }

// GetTimestamp returns MarketsMarketsMarket.Timestamp, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetTimestamp() string { return v.Timestamp }

// GetCreator returns MarketsMarketsMarket.Creator, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetCreator() string { return v.Creator }

// GetCurrencyKey returns MarketsMarketsMarket.CurrencyKey, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetCurrencyKey() string { return v.CurrencyKey }

// GetStrikePrice returns MarketsMarketsMarket.StrikePrice, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetStrikePrice() string { return v.StrikePrice }

// GetMaturityDate returns MarketsMarketsMarket.MaturityDate, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetMaturityDate() string { return v.MaturityDate }

// GetExpiryDate returns MarketsMarketsMarket.ExpiryDate, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetExpiryDate() string { return v.ExpiryDate }

// GetIsOpen returns MarketsMarketsMarket.IsOpen, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetIsOpen() bool { return v.IsOpen }

// GetResult returns MarketsMarketsMarket.Result, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetResult() int { return v.Result }

// GetLongAddress returns MarketsMarketsMarket.LongAddress, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetLongAddress() string { return v.LongAddress }

// GetShortAddress returns MarketsMarketsMarket.ShortAddress, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetShortAddress() string { return v.ShortAddress }

// GetFinalPrice returns MarketsMarketsMarket.FinalPrice, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetFinalPrice() string { return v.FinalPrice }

// MarketsResponse is returned by Markets on success.
type MarketsResponse struct {
	Markets []MarketsMarketsMarket `json:"markets"`
}

// GetMarkets returns MarketsResponse.Markets, and is useful for accessing the field via an interface.
func (v *MarketsResponse) GetMarkets() []MarketsMarketsMarket { return v.Markets }

func Markets(
	ctx context.Context,
	client graphql.Client,
) (*MarketsResponse, error) {
	var err error

	var retval MarketsResponse
	err = client.MakeRequest(
		ctx,
		"Markets",
		`
query Markets {
	markets(
		orderBy:timestamp,
		orderDirection:desc,
		where:{timestamp_gt: 1650000000}
	  ) {
		id
		timestamp
		creator
		currencyKey
		strikePrice
		maturityDate
		expiryDate
		isOpen
		result
		longAddress
		shortAddress
		finalPrice
	}
}
`,
		&retval,
		nil,
	)
	return &retval, err
}
