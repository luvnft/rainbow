// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package thales

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// MarketsMarketsMarket includes the requested fields of the GraphQL type Market.
type MarketsMarketsMarket struct {
	Id           string `json:"id"`
	Timestamp    int64  `json:"timestamp"`
	Creator      []byte `json:"creator"`
	CurrencyKey  []byte `json:"currencyKey"`
	StrikePrice  int64  `json:"strikePrice"`
	MaturityDate int64  `json:"maturityDate"`
	ExpiryDate   int64  `json:"expiryDate"`
	IsOpen       bool   `json:"isOpen"`
	PoolSize     int64  `json:"poolSize"`
	LongAddress  []byte `json:"longAddress"`
	ShortAddress []byte `json:"shortAddress"`
	Result       int    `json:"result"`
	CustomMarket bool   `json:"customMarket"`
	CustomOracle []byte `json:"customOracle"`
	FinalPrice   int64  `json:"finalPrice"`
}

// GetId returns MarketsMarketsMarket.Id, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetId() string { return v.Id }

// GetTimestamp returns MarketsMarketsMarket.Timestamp, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetTimestamp() int64 { return v.Timestamp }

// GetCreator returns MarketsMarketsMarket.Creator, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetCreator() []byte { return v.Creator }

// GetCurrencyKey returns MarketsMarketsMarket.CurrencyKey, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetCurrencyKey() []byte { return v.CurrencyKey }

// GetStrikePrice returns MarketsMarketsMarket.StrikePrice, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetStrikePrice() int64 { return v.StrikePrice }

// GetMaturityDate returns MarketsMarketsMarket.MaturityDate, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetMaturityDate() int64 { return v.MaturityDate }

// GetExpiryDate returns MarketsMarketsMarket.ExpiryDate, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetExpiryDate() int64 { return v.ExpiryDate }

// GetIsOpen returns MarketsMarketsMarket.IsOpen, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetIsOpen() bool { return v.IsOpen }

// GetPoolSize returns MarketsMarketsMarket.PoolSize, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetPoolSize() int64 { return v.PoolSize }

// GetLongAddress returns MarketsMarketsMarket.LongAddress, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetLongAddress() []byte { return v.LongAddress }

// GetShortAddress returns MarketsMarketsMarket.ShortAddress, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetShortAddress() []byte { return v.ShortAddress }

// GetResult returns MarketsMarketsMarket.Result, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetResult() int { return v.Result }

// GetCustomMarket returns MarketsMarketsMarket.CustomMarket, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetCustomMarket() bool { return v.CustomMarket }

// GetCustomOracle returns MarketsMarketsMarket.CustomOracle, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetCustomOracle() []byte { return v.CustomOracle }

// GetFinalPrice returns MarketsMarketsMarket.FinalPrice, and is useful for accessing the field via an interface.
func (v *MarketsMarketsMarket) GetFinalPrice() int64 { return v.FinalPrice }

// MarketsResponse is returned by Markets on success.
type MarketsResponse struct {
	Markets []MarketsMarketsMarket `json:"markets"`
}

// GetMarkets returns MarketsResponse.Markets, and is useful for accessing the field via an interface.
func (v *MarketsResponse) GetMarkets() []MarketsMarketsMarket { return v.Markets }

// __MarketsInput is used internally by genqlient
type __MarketsInput struct {
	Skip  int   `json:"skip"`
	First int   `json:"first"`
	T     int64 `json:"t"`
}

// GetSkip returns __MarketsInput.Skip, and is useful for accessing the field via an interface.
func (v *__MarketsInput) GetSkip() int { return v.Skip }

// GetFirst returns __MarketsInput.First, and is useful for accessing the field via an interface.
func (v *__MarketsInput) GetFirst() int { return v.First }

// GetT returns __MarketsInput.T, and is useful for accessing the field via an interface.
func (v *__MarketsInput) GetT() int64 { return v.T }

func Markets(
	ctx context.Context,
	client graphql.Client,
	skip int,
	first int,
	t int64,
) (*MarketsResponse, error) {
	__input := __MarketsInput{
		Skip:  skip,
		First: first,
		T:     t,
	}
	var err error

	var retval MarketsResponse
	err = client.MakeRequest(
		ctx,
		"Markets",
		`
query Markets ($skip: Int, $first: Int, $t: BigInt) {
	markets(skip: $skip, first: $first, orderBy: timestamp, orderDirection: desc, where: {timestamp_gt:$t}) {
		id
		timestamp
		creator
		currencyKey
		strikePrice
		maturityDate
		expiryDate
		isOpen
		poolSize
		longAddress
		shortAddress
		result
		customMarket
		customOracle
		finalPrice
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}
